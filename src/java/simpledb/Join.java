package simpledb;

import java.io.IOException;
import java.util.*;

/**
 * The Join operator implements the relational join operation.
 */
public class Join extends Operator {

    private static final long serialVersionUID = 1L;
    private JoinPredicate pred = null;
    private DbIterator c1 = null;
    private DbIterator c2 = null;


    /**
     * Constructor. Accepts to children to join and the predicate to join them
     * on
     * 
     * @param p
     *            The predicate to use to join the children
     * @param child1
     *            Iterator for the left(outer) relation to join
     * @param child2
     *            Iterator for the right(inner) relation to join
     */
    public Join(JoinPredicate p, DbIterator child1, DbIterator child2) {
        pred = p;
        c1 = child1;
        c2 = child2;
    }

    public JoinPredicate getJoinPredicate() {
        return pred;
    }

    /**
     * @return
     *       the field name of join field1. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField1Name() {
        TupleDesc desc = c1.getTupleDesc();
        return desc.getFieldName(pred.getField1());
    }

    /**
     * @return
     *       the field name of join field2. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField2Name() {
        TupleDesc desc = c2.getTupleDesc();
        return desc.getFieldName(pred.getField2());
    }

    /**
     * @see simpledb.TupleDesc#merge(TupleDesc, TupleDesc) for possible
     *      implementation logic.
     */
    public TupleDesc getTupleDesc() {
        TupleDesc td1 = c1.getTupleDesc();
        TupleDesc td2 = c2.getTupleDesc();

        return TupleDesc.merge(td1, td2);
    }

    public void open() throws DbException, NoSuchElementException,
            TransactionAbortedException, IOException {
        c1.open();
        c2.open();
        super.open();
    }

    public void close() {
        super.close();
        c1.close();
        c2.close();
    }

    public void rewind() throws DbException, TransactionAbortedException, IOException {
        c1.rewind();
        c2.rewind();
    }

    /**
     * Returns the next tuple generated by the join, or null if there are no
     * more tuples. Logically, this is the next tuple in r1 cross r2 that
     * satisfies the join predicate. There are many possible implementations;
     * the simplest is a nested loops join.
     * <p>
     * Note that the tuples returned from this particular implementation of Join
     * are simply the concatenation of joining tuples from the left and right
     * relation. Therefore, if an equality predicate is used there will be two
     * copies of the join attribute in the results. (Removing such duplicate
     * columns can be done with an additional projection operator if needed.)
     * <p>
     * For example, if one tuple is {1,2,3} and the other tuple is {1,5,6},
     * joined on equality of the first column, then this returns {1,2,3,1,5,6}.
     * 
     * @return The next matching tuple.
     * @see JoinPredicate#filter
     */
    protected Tuple fetchNext() throws TransactionAbortedException, DbException {

        while (c2.hasNext()) {
            Tuple t1 = c2.next();
            while(c1.hasNext()) {
                Tuple t2 = c1.next();

                System.out.println("crossing new tuple");
                //System.out.println("t1:" + t1.getField(num) + "t2:" + t2.getField(num))

                if(pred.filter(t1, t2)){
                    //System.out.println("crossing new tuple");
                    Tuple newTuple = new Tuple(this.getTupleDesc());

                    int counter = 0;
                    for (int i = 0; i < c2.getTupleDesc().numFields(); i++) {
                        newTuple.setField(counter, t1.getField(i));
                        //System.out.println("t1 field: " + t1.getField(i));
                        counter++;
                    }
                    for (int i = 0; i < c1.getTupleDesc().numFields(); i++) {
                        newTuple.setField(counter, t2.getField(i));
                        //System.out.println("t2 field: " + t2.getField(i));
                        counter++;
                    }

                    return newTuple;
                }

                //newTuple.setRecordId(t.getRecordId());
            }
        }
        return null;
    }

    @Override
    public DbIterator[] getChildren() {
        return new DbIterator[] { this.c1, this.c2 };
    }

    @Override
    public void setChildren(DbIterator[] children) {
        if (this.c1!=children[0]) {
            this.c1 = children[0];
        }
    }

}
