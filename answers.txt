2.7 Query Parser 
The first query took 1 second. Both the second and third queries took over an hour (1 hour+), and thus, we were not able to complete those queries.

1) In terms of the design decisions that we made, we again decided to throw exceptions instead of catching them in our code.
We decided to implement LRU as our eviction policy, because it would be more efficient than using a random eviction policy,
which would potentially evict pages that we recently accessed and intend on accessing again sometime in the near future.
 We implemented this particular eviction policy by using Java's built-in LinkedHashMap, where the order of iteration is the
 order in which its entries were last accessed. We utilized the method flushPage(), flushes the page to disk before
 the oldest item (item that was accessed the furthest in the past) in the data structure is deleted.

For some reason, when we ran the given command to do the SQL queries (java -jar dist/simpledb.jar parser dblp_simpledb.schema),
it produced a DbException. However, when we slightly modified the command to become java -jar dist/simpledb.jar parser ./dblp_simpledb.schema
(with the extra ./ in front of the schema file), it ran fine, and executed the queries properly.
 
2) The only changes in the API that we made were to modify certain signatures in the file to also throw IOExceptions,
which could potentially be thrown in all our Iterator code (i.e. when we call open(), hasNext(), etc.).
 
3) Our code does not have any missing or incomplete elements.
 
4) We spent about 26 hours total on this project, and ended up using a slip day. My partner and I now both have 3 slip days left.
